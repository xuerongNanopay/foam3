## Scratch Examples
##  Binding
--

foam.CLASS({
  name: 'Data',

  properties: [
    {
      class: 'String',
      name: 'firstName'
    },
    {
      class: 'String',
      name: 'lastName'
    },
    {
      class: 'Int',
      name: 'age'
    }
  ],

  actions: [
    function incr() { this.age++; }
  ]
});


foam.CLASS({
  name: 'Example',
  extends: 'foam.u2.View',

  properties: [
    {
      class: 'FObjectProperty',
      of: 'Data',
      name: 'data',
      factory: function() { return Data.create(); }
    }
  ],

  methods: [
    function render() {
      this.SUPER();
      this.add(this.data.FIRST_NAME.__, this.data.LAST_NAME.__, this.data.AGE.__, this.data.INCR, this.MUL);
    }
  ],

  actions: [
    function mul() { this.data.age *= 10; }
  ]
});

tag(Example);

##  DynamciDynamic

--
foam.CLASS({
  name: 'Example',
  extends: 'foam.u2.Controller',

  properties: [
    { class: 'Int', name: 'count', onKey: true },
    { class: 'Int', name: 'count2', onKey: true },
  ],

  methods: [
    function render() {
      var self = this;

      this.add(this.COUNT.__);
      this.add(this.COUNT2.__);
      this.br();
      this.add(this.count$, ' ', this.count2$);

      this.start('ol').add(function(count) {
        this.start('li').add('1: ' + count).end().add(self.dynamic(function(count2) {
          this.start('b').add('2: ' + count2).end();
        }));
      });

      this.start('ol').add(function(count) {
        this.start('li').add('3: ' + count);
      });
    }
  ]
});

tag(Example);

##  Scratch
Insert temporary example here.
--
foam.CLASS({
  name: 'Example',

  properties: [
  /*
    {
      class: 'FObjectProperty',
      name: 'o1',
      factory: function() { return foam.util.Timer.create(); }
    },
    {
      class: 'FObjectProperty',
      name: 'o2'
    },
    {
      class: 'FObjectProperty',
      name: 'o3',
      of: 'foam.util.Timer'
    },
    */
    {
      class: 'FObjectProperty',
      name: 'o4',
      of: 'foam.util.Timer',
      view: 'foam.u2.view.OptionalFObjectView'
    },
    {
      class: 'FObjectProperty',
      name: 'o5',
      of: 'foam.util.Timer',
      factory: function() { return foam.util.Timer.create(); },
      view: 'foam.u2.view.OptionalFObjectView'
    },
  ]
});

globalThis.example = Example.create();
tag(globalThis.example);

##  Date Bug?
--
foam.CLASS({
  name: 'Example',

  properties: [
    { class: 'Date', name: 'date1', postSet: function(o,n) { this.date2 = n; } },
    { class: 'Date', name: 'date2', view: 'foam.u2.DateView' },
    { class: 'DateTime', name: 'datetime1', postSet: function(o,n) { this.datetime2 = n; } },
    { class: 'DateTime', name: 'datetime2' },
    { class: 'String', name: 'summary', width: 100, expression: function(date2, datetime2) { return date2 + " " + datetime2; } }
  ]
});

globalThis.e = Example.create();

tag(globalThis.e);
tag(Example);
tag(Example);
tag(Example);
tag(Example);



##  Empty
--
